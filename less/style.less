@import "reset";
@import "variables";


/* RESPONSIVE TYPE
 * ---------------
 * Within reason, set font size so that @measure + body padding fills window.
 * (Ugh. Waiting for {less} to have better looping or @media support.)
 */
@media all { html { font-size: @minFontSize; } }
@media print { body { max-width: @measure; } }
@media screen and (min-width: 525px) { html { font-size: 15px; } }
@media screen and (min-width: 560px) { html { font-size: 16px; } }
@media screen and (min-width: 595px) { html { font-size: 17px; } }
@media screen and (min-width: 630px) { html { font-size: 18px; } }
@media screen and (min-width: 665px) { html { font-size: 19px; } }
@media screen and (min-width: 700px) { html { font-size: 20px; } }
@media screen and (min-width: 735px) { html { font-size: 21px; } }
@media screen and (min-width: 770px) {
    html { font-size: @maxFontSize; }
    body { max-width: @measure; }
}


/* MIXINS
 * ------
 */
.border-radius(@radius) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.box-shadow(@shadow) {
    -webkit-box-shadow: @shadow;
    -moz-box-shadow: @shadow;
    box-shadow: @shadow;
}

.pull-right { float: right; }
.pull-left { float: left; }
.pull-center {
    display: block;
    float: inherit;
    margin-left: auto;
    margin-right: auto;
}

.well {
    min-height: @v;
    padding: (@v - 1px);
    margin-bottom: 1rem;
    background-color: @wellColor;
    border: 1px solid darken(@wellColor, 7%);
    .border-radius(0.3rem);
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.05));
}

.clearfix {
    *zoom: 1;
    &:before,
    &:after {
        display: table;
        content: "";
        // Fixes Opera/contenteditable bug:
        // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
        line-height: 0;
    }
    &:after {
        clear: both;
    }
}

.row { margin: @v 0; }

.small { font-size: (1rem / @ratio); }
.large { font-size: (1rem * @ratio); }
.larger { font-size: (1rem * @ratio * @ratio); }
.huge { font-size: (1rem * @ratio * @ratio * @ratio); }


/* PAGE FOUNDATIONS
 * ----------------
 */
body {
    margin-left: auto;
    margin-right: auto;
    padding: 0 @v;
    font-family: @baseFontFamily;
    line-height: @lineHeight;
    color: @textColor;
    background: @backgroundColor;
    text-rendering: optimizeLegibility;
}

nav.branding, footer {
    .small;
    color: lighten(@textColor, 15%);
    font-style: italic;
    text-align: center;
}

nav.branding {
    .row;
    margin-bottom: (@v * 3);
    .flourish { margin: @v 0 0; }
    a { color: @textColor; }
    a.site-name {
        font-family: @altFontFamily;
        font-size: 1rem;
        font-style: normal;
        font-weight: 700;
        text-transform: uppercase;
    }
}

footer, article.comments {
    .row;
    margin-top: (@v * 3);
}

footer .flourish {
    margin: 0 0 @v;
}

header {
    text-align: center;
    margin-bottom: @v;
}

// Headers
// h4, h5, and h6 have identical styling
h1, h2, h3, h4, h5, h6 {
    // No border or padding - rely on surround paragraphs
    padding: 0;
    font-family: @headerFontFamily;
    font-size: 1rem;
    line-height: 1;
    font-weight: bold;
    vertical-align: baseline;
}
h1 { .huge; }
h2 { .larger; }
h3 { .large; }

// Paragraphs
p {
    .row;
}
p.lead {
    .large;
    margin: @v 0 (3 * @v);
    text-align: center;
}

// Links
a {
    text-decoration: none;
    color: @primaryColor;
    &:visited { color: desaturate(@secondaryColor, 25%); }
    &:hover, &:active, &.active { 
        color: @textColor;
        text-decoration: none;
        border-bottom: dotted 1px;
    }
    &:focus { border: dotted 1px; }
}

// Semantic span styles
small {
    .small;
}
strong {
    font-weight: bold;
}
em {
    font-style: italic;
}
cite {
    font-style: inherit;
}
del {
    text-decoration: line-through;
}

// Resize all-caps to be between font-size and Calluna's x-height
abbr, .caps {
    font-size: 90%;
}

ins, mark {
    color: @textColor;
    background-color: @updateColor;
}

// Lists
li {
    margin-left: @v;
}
.post-list {
    text-align: center;
    list-style: none;
    li {
        .row;
        margin-left: 0;
    }
    a { color: @textColor; }
}

// Blockquotes
blockquote {
    .clearfix;
    border-left: (1em / @ratio) solid @grayLighter;
    padding: (1em / @ratio) 0 (1em / @ratio) 1em;
    p:first-of-type { margin-top: 0; }
    p:last-of-type { margin-bottom: 0; }
    small {
        .pull-right;
        font-size: 1rem;
        font-style: italic;
        text-align: right;
        width: 100%;
    }
}

// Publish dates for posts
.post-date {
    line-height: 2rem;
    &:before { content: "\2014\ "; }
    &:after { content: " \2014"; }
}
// Style finials separating nav and footer from content
.flourish {
    height: (@v * 2);
}

// Block-length updates to published posts
.update {
    padding: @v;
    background-color: @updateColor;
    border: 1px solid darken(@updateColor, 7%);
    .border-radius(0.3rem);
    .box-shadow(inset 0 1px 1px rgba(0,0,0,.05));
}

// Style images inside figures
.polaroid {
    .well;
    .pull-center;
    width: (@v * 6);
}
.polaroid.right {
    @media screen and (min-width: 300px) {
        .pull-right;
        margin-left: 1rem;
    }
}
.polaroid.left {
    @media screen and (min-width: 300px) {
        .pull-left;
        margin-right: 1rem;
    }
}

figure img { .polaroid; }

code, pre {
    font-size: 0.7rem;
    background: @grayLighter;
    font-family: @monoFontFamily;
    padding: 0.1rem 0.25rem;
    border: 1px solid @grayLight;
    color: #D01040; // same as string Literal.String below
    .border-radius(0.2rem);
}

.codehilite pre {
    .small;
    padding: @v;
    word-break: break-all;
    word-wrap: break-word;
    white-space: pre;
    white-space: pre-wrap;
    .border-radius(0.3rem);
    background-color: @grayLighter;
    // GitHub-inspired color palette
    .c { color: #999988; font-style: italic; } // Comment
    .err { color: #a61717; background-color: #e3d2d2; } // Error
    .k { color: #000000; font-weight: bold; } // Keyword
    .o { color: #000000; font-weight: bold; } // Operator
    .cm { color: #999988; font-style: italic; } // Comment.Multiline
    .cp { color: #999999; font-weight: bold; font-style: italic; } // Comment.Preproc
    .c1 { color: #999988; font-style: italic; } // Comment.Single
    .cs { color: #999999; font-weight: bold; font-style: italic; } // Comment.Special
    .gd { color: #000000; background-color: #ffdddd; } // Generic.Deleted
    .ge { color: #000000; font-style: italic; } // Generic.Emph
    .gr { color: #aa0000; } // Generic.Error
    .gh { color: #999999; } // Generic.Heading
    .gi { color: #000000; background-color: #ddffdd; } // Generic.Inserted
    .go { color: #888888; } // Generic.Output
    .gp { color: #555555; } // Generic.Prompt
    .gs { font-weight: bold; } // Generic.Strong
    .gu { color: #aaaaaa; } // Generic.Subheading
    .gt { color: #aa0000; } // Generic.Traceback
    .kc { color: #000000; font-weight: bold; } // Keyword.Constant
    .kd { color: #000000; font-weight: bold; } // Keyword.Declaration
    .kn { color: #000000; font-weight: bold; } // Keyword.Namespace
    .kp { color: #000000; font-weight: bold; } // Keyword.Pseudo
    .kr { color: #000000; font-weight: bold; } // Keyword.Reserved
    .kt { color: #445588; font-weight: bold; } // Keyword.Type
    .m { color: #009999; } // Literal.Number
    .s { color: #d01040; } // Literal.String
    .na { color: #008080; } // Name.Attribute
    .nb { color: #0086B3; } // Name.Builtin
    .nc { color: #445588; font-weight: bold; } // Name.Class
    .no { color: #008080; } // Name.Constant
    .nd { color: #3c5d5d; font-weight: bold; } // Name.Decorator
    .ni { color: #800080; } // Name.Entity
    .ne { color: #990000; font-weight: bold; } // Name.Exception
    .nf { color: #990000; font-weight: bold; } // Name.Function
    .nl { color: #990000; font-weight: bold; } // Name.Label
    .nn { color: #555555; } // Name.Namespace
    .nt { color: #000080; } // Name.Tag
    .nv { color: #008080; } // Name.Variable
    .ow { color: #000000; font-weight: bold; } // Operator.Word
    .w { color: #bbbbbb; } // Text.Whitespace
    .mf { color: #009999; } // Literal.Number.Float
    .mh { color: #009999; } // Literal.Number.Hex
    .mi { color: #009999; } // Literal.Number.Integer
    .mo { color: #009999; } // Literal.Number.Oct
    .sb { color: #d01040; } // Literal.String.Backtick
    .sc { color: #d01040; } // Literal.String.Char
    .sd { color: #d01040; } // Literal.String.Doc
    .s2 { color: #d01040; } // Literal.String.Double
    .se { color: #d01040; } // Literal.String.Escape
    .sh { color: #d01040; } // Literal.String.Heredoc
    .si { color: #d01040; } // Literal.String.Interpol
    .sx { color: #d01040; } // Literal.String.Other
    .sr { color: #009926; } // Literal.String.Regex
    .s1 { color: #d01040; } // Literal.String.Single
    .ss { color: #990073; } // Literal.String.Symbol
    .bp { color: #999999; } // Name.Builtin.Pseudo
    .vc { color: #008080; } // Name.Variable.Class
    .vg { color: #008080; } // Name.Variable.Global
    .vi { color: #008080; } // Name.Variable.Instance
    .il { color: #009999; } // Literal.Number.Integer.Long
}

/* HIDE TYPEKIT BADGE
 * ------------------
 * I'm a bad person, but it's just so *ugly*. Put a shout-out in the
 * footer instead. (You'd think a type service would try harder.)
 */
.typekit-badge { display: none !important; }
